import * as MoleculerTs from 'moleculer-ts';
import * as Moleculer from './moleculer';
import * as Services from './services.types';

export interface ServiceBroker {
  call<T extends ServiceActionNames>(
    actionName: T,
    params: GetCallParams[T],
    opts?: Moleculer.CallingOptions,
  ): PromiseLike<GetCallReturn[T]>;

  emit<T extends ServiceEventNames>(
    eventName: T,
    payload: GetEmitParams[T],
    groups?: ServiceNamesEmitGroup,
  ): void;

  broadcast: ServiceBroker['emit']
  broadcastLocal: ServiceBroker['emit']
}

export type GetCallParams = {
{{#callObj}}
  '{{name}}': Services.{{type}}.Actions[{{index}}]['in'];
{{/callObj}}
};

export type GetCallReturn = {
{{#callObj}}
  '{{name}}': Services.{{type}}.Actions[{{index}}]['out'];
{{/callObj}}
};

export type GetEmitParams = {
{{#emitObj}}
  '{{name}}': Services.{{type}}.Events[{{index}}]['in'];
{{/emitObj}}
};

export type ServiceNames = Exclude<never {{#ServiceNames}}| '{{.}}'{{/ServiceNames}}, never>;
export type ServiceEventNames = Exclude<never {{#ServiceEventNames}}| '{{.}}'{{/ServiceEventNames}}, never>;
export type ServiceActionNames = Exclude<never {{#ServiceActionNames}}| '{{.}}'{{/ServiceActionNames}}, never>;
export type ServiceNamesEmitGroup = ServiceNames | ServiceNames[];
